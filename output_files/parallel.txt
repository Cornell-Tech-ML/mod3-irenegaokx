MAP

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map,
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (163)

================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (163)
------------------------------------------------------------------------------|loop #ID
    def _map(                                                                 |
        out: Storage,                                                         |
        out_shape: Shape,                                                     |
        out_strides: Strides,                                                 |
        in_storage: Storage,                                                  |
        in_shape: Shape,                                                      |
        in_strides: Strides,                                                  |
    ) -> None:                                                                |
        for i in prange(len(out)):--------------------------------------------| #2
            out_idx = np.zeros(len(out_shape), dtype=np.int32)----------------| #0
            in_idx = np.zeros(len(in_shape), dtype=np.int32)------------------| #1
            to_index(i, out_shape, out_idx)                                   |
            broadcast_index(out_idx, out_shape, in_shape, in_idx)             |
            out[i] = fn(in_storage[index_to_position(in_idx, in_strides)])    |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #2, #0, #1).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--2 is a parallel loop
   +--0 --> rewritten as a serial loop
   +--1 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--2 (parallel)
   +--0 (parallel)
   +--1 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--2 (parallel)
   +--0 (serial)
   +--1 (serial)



Parallel region 0 (loop #2) had 0 loop(s) fused and 2 loop(s) serialized as part
 of the larger parallel loop (#2).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (172)
is hoisted out of the parallel loop labelled #2 (it will be performed before the
 loop is executed and reused inside the loop):
   Allocation:: out_idx = np.zeros(len(out_shape), dtype=np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (173)
is hoisted out of the parallel loop labelled #2 (it will be performed before the
 loop is executed and reused inside the loop):
   Allocation:: in_idx = np.zeros(len(in_shape), dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
ZIP

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip,
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (204)

================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (204)
-------------------------------------------------------------------|loop #ID
    def _zip(                                                      |
        out: Storage,                                              |
        out_shape: Shape,                                          |
        out_strides: Strides,                                      |
        a_storage: Storage,                                        |
        a_shape: Shape,                                            |
        a_strides: Strides,                                        |
        b_storage: Storage,                                        |
        b_shape: Shape,                                            |
        b_strides: Strides,                                        |
    ) -> None:                                                     |
        for i in prange(len(out)):---------------------------------| #6
            out_idx = np.zeros(len(out_shape), dtype=np.int32)-----| #3
            a_idx = np.zeros(len(a_shape), dtype=np.int32)---------| #4
            b_idx = np.zeros(len(b_shape), dtype=np.int32)---------| #5
            to_index(i, out_shape, out_idx)                        |
            broadcast_index(out_idx, out_shape, a_shape, a_idx)    |
            broadcast_index(out_idx, out_shape, b_shape, b_idx)    |
            a_pos = index_to_position(a_idx, a_strides)            |
            b_pos = index_to_position(b_idx, b_strides)            |
            out[i] = fn(a_storage[a_pos], b_storage[b_pos])        |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 4 parallel for-
loop(s) (originating from loops labelled: #6, #3, #4, #5).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--6 is a parallel loop
   +--3 --> rewritten as a serial loop
   +--4 --> rewritten as a serial loop
   +--5 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--6 (parallel)
   +--3 (parallel)
   +--4 (parallel)
   +--5 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--6 (parallel)
   +--3 (serial)
   +--4 (serial)
   +--5 (serial)



Parallel region 0 (loop #6) had 0 loop(s) fused and 3 loop(s) serialized as part
 of the larger parallel loop (#6).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (216)
is hoisted out of the parallel loop labelled #6 (it will be performed before the
 loop is executed and reused inside the loop):
   Allocation:: out_idx = np.zeros(len(out_shape), dtype=np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (217)
is hoisted out of the parallel loop labelled #6 (it will be performed before the
 loop is executed and reused inside the loop):
   Allocation:: a_idx = np.zeros(len(a_shape), dtype=np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (218)
is hoisted out of the parallel loop labelled #6 (it will be performed before the
 loop is executed and reused inside the loop):
   Allocation:: b_idx = np.zeros(len(b_shape), dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce,
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (250)

================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (250)
---------------------------------------------------------------------------------------|loop #ID
    def _reduce(                                                                       |
        out: Storage,                                                                  |
        out_shape: Shape,                                                              |
        out_strides: Strides,                                                          |
        a_storage: Storage,                                                            |
        a_shape: Shape,                                                                |
        a_strides: Strides,                                                            |
        reduce_dim: int,                                                               |
    ) -> None:                                                                         |
        for i in prange(len(out)):-----------------------------------------------------| #10
            out_idx = np.zeros(len(out_shape), dtype=np.int32)-------------------------| #8
            a_idx = np.zeros(len(a_shape), dtype=np.int32)-----------------------------| #9
            to_index(i, out_shape, out_idx)                                            |
            for j in range(a_shape[reduce_dim]):                                       |
                a_idx[:] = out_idx-----------------------------------------------------| #7
                a_idx[reduce_dim] = j                                                  |
                out[i] = fn(out[i], a_storage[index_to_position(a_idx, a_strides)])    |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #10, #8, #9).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--10 is a parallel loop
   +--8 --> rewritten as a serial loop
   +--9 --> rewritten as a serial loop
   +--7 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--8 (parallel)
   +--9 (parallel)
   +--7 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--8 (serial)
   +--9 (serial)
   +--7 (serial)



Parallel region 0 (loop #10) had 0 loop(s) fused and 3 loop(s) serialized as
part of the larger parallel loop (#10).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (260)
is hoisted out of the parallel loop labelled #10 (it will be performed before
the loop is executed and reused inside the loop):
   Allocation:: out_idx = np.zeros(len(out_shape), dtype=np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (261)
is hoisted out of the parallel loop labelled #10 (it will be performed before
the loop is executed and reused inside the loop):
   Allocation:: a_idx = np.zeros(len(a_shape), dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY

================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply,
/Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (271)

================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/irenegao/Desktop/mle cornell/mod3-irenegaokx/minitorch/fast_ops.py (271)
---------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                         |
    out: Storage,                                                    |
    out_shape: Shape,                                                |
    out_strides: Strides,                                            |
    a_storage: Storage,                                              |
    a_shape: Shape,                                                  |
    a_strides: Strides,                                              |
    b_storage: Storage,                                              |
    b_shape: Shape,                                                  |
    b_strides: Strides,                                              |
) -> None:                                                           |
    """NUMBA tensor matrix multiply function.                        |
                                                                     |
    Should work for any tensor shapes that broadcast as long as      |
                                                                     |
    ```                                                              |
    assert a_shape[-1] == b_shape[-2]                                |
    ```                                                              |
                                                                     |
    Optimizations:                                                   |
                                                                     |
    * Outer loop in parallel                                         |
    * No index buffers or function calls                             |
    * Inner loop should have no global writes, 1 multiply.           |
                                                                     |
                                                                     |
    Args:                                                            |
    ----                                                             |
        out (Storage): storage for `out` tensor                      |
        out_shape (Shape): shape for `out` tensor                    |
        out_strides (Strides): strides for `out` tensor              |
        a_storage (Storage): storage for `a` tensor                  |
        a_shape (Shape): shape for `a` tensor                        |
        a_strides (Strides): strides for `a` tensor                  |
        b_storage (Storage): storage for `b` tensor                  |
        b_shape (Shape): shape for `b` tensor                        |
        b_strides (Strides): strides for `b` tensor                  |
                                                                     |
    Returns:                                                         |
    -------                                                          |
        None : Fills in `out`                                        |
                                                                     |
    """                                                              |
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0           |
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0           |
                                                                     |
    for n in prange(out_shape[0]):  ---------------------------------| #11
        for i in range(out_shape[1]):                                |
            for j in range(out_shape[2]):                            |
                out_pos = (                                          |
                    n * out_strides[0]                               |
                    + i * out_strides[1]                             |
                    + j * out_strides[2]                             |
                )                                                    |
                result = 0.0                                         |
                for k in range(a_shape[-1]):                         |
                    a_pos = (                                        |
                        n * a_batch_stride                           |
                        + i * a_strides[1]                           |
                        + k * a_strides[2]                           |
                    )                                                |
                    b_pos = (                                        |
                        n * b_batch_stride                           |
                        + k * b_strides[1]                           |
                        + j * b_strides[2]                           |
                    )                                                |
                    result += a_storage[a_pos] * b_storage[b_pos]    |
                out[out_pos] = result                                |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #11).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None